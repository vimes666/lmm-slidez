#!/bin/bash
# Slideshow generator for Linux Mint Mate by vimes666
 
version="${0##*/} - version 2.9"
input_folder="/usr/share/backgrounds"
output_file="$HOME/.backgrounds/slideshow.xml"
duration=300
maxdepth=2147483647   # default maximum
doannotate=false
randomize=false
overwrite=false
cnt=0
usage="Usage: ${0##*/} [-f] [-h] [-r] [-v] [-d duration] [-a annotation-type ] [-i input-folder] [-m maxdepth] [-o output-file]"

# Annotate and copy the images
function annotate_files {
   echo "Annotation $annotation not implemented yet."
}
 
# Write the startdate section
function write_heading {
   echo "<!-- Slideshow generated by $version, $(date +'%Y-%m-%d %H:%M:%S') -->" > $output_file
   echo "<background>" >> $output_file
   echo "  <starttime>" >> $output_file
   echo "    <year>$(date +'%Y')</year>" >> $output_file
   echo "    <month>$(date +'%m')</month>" >> $output_file
   echo "    <day>$(date +'%d')</day>" >> $output_file
   echo "    <hour>$(date +'%H')</hour>" >> $output_file
   echo "    <minute>$(date +'%M')</minute>" >> $output_file
   echo "    <second>$(date +'%S')</second>" >> $output_file
   echo "  </starttime>" >> $output_file
}

# Write the static section
function write_static {
   echo "  <static>" >> $output_file
   echo "    <duration>$duration</duration>" >> $output_file
   echo "    <file>"$line"</file>" >> $output_file
   echo "  </static>" >> $output_file
} 

# Write the transition section
function write_transition {
   echo "  <transition>" >> $output_file
   echo "    <duration>3.0</duration>" >> $output_file
   echo "    <from>"$prevline"</from>" >> $output_file
   echo "    <to>"$line"</to>" >> $output_file
   echo "  </transition>" >> $output_file
}

# Write the tail line
function write_tail {
   echo "</background>" >> $output_file
}

# check switches
while getopts a:d:fhi:m:o:rv opt; do
   case $opt in
      a)  doannotate=true && annotation=$OPTARG ;;
      d)  duration=$OPTARG ;;
      f)  overwrite=true ;;
      h)  echo "$usage" && exit 0 ;;
      i)  input_folder=$OPTARG ;;
      m)  maxdepth=$OPTARG ;;
      o)  output_file=$OPTARG ;;
      r)  randomize=true ;;
      v)  echo $version && exit 0 ;;
      *)  echo "$usage" && exit 1 ;;
   esac
done

if [ $OPTIND -eq 1 ]; then 
   echo "No options were passed"
fi

shift $((OPTIND-1))
if [ ! $# -eq 0 ]; then 
   echo "Non-option argument(s) found: $@"
   echo $usage
   exit 1
fi

if [ ! -d "$input_folder" ]; then
   echo "Invalid input folder: $input_folder"
   echo $usage
   exit 1
fi

if "$doannotate"; then
   case $annotation in
      file-name)  annotate_files ;;
      file-path)  annotate_files ;;
      author)     annotate_files ;;
      *)          echo 'Invalid annotation type.' && exit 1 ;;
   esac
fi

images=$(find $input_folder -maxdepth $maxdepth -iname "*.jp*g" -o -iname "*.png" -o -iname "*.gif")   # Get the filenames of the images

if [ -z "$images" ]; then
   echo "No images found in $input_folder"
   exit 1
fi

if "$randomize"; then
   temp=$(sort -R --random-source=/dev/urandom <<< "$images")
   images="$temp"
fi

if [ -w $output_file  ]; then    
   if "$overwrite"; then
      answer=$overwrite
   else
      echo -e "$output_file already exists, do you want to replace it? - Y/\e[4mN\e[0m"
      read answer
   fi
   case $answer in
      [yY]|yes|Yes|YES|true) echo "Replacing $output_file" ;;
      *) echo "${0##*/} stopped" && exit 1 ;;
   esac
fi  

write_heading      # Make the XML file
while read -r line; do     
   if [ $cnt -eq 0 ]; then
      write_static
   else
      write_transition
      write_static
   fi
   ((cnt++))
   prevline=$line
done <<< "$images"
write_tail

dconf write /org/mate/desktop/background/picture-filename "'$output_file'"  # Activate slideshow

echo "Slideshow '$output_file' created with $cnt images."
